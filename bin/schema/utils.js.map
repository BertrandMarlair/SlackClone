{"version":3,"sources":["../../src/schema/utils.js"],"names":["parseDefinitions","arr","key","map","definitions","join","generateTypeDefs","models","generateResolvers","resolvers","Query","Mutation","Subscription","forEach","types","queries","mutations","subscriptions","arangoElementResolver","id","_key"],"mappings":"klCAAA,KAAMA,CAAAA,gBAAgB,CAAG,CAACC,GAAD,CAAMC,GAAN,GACrBD,GAAG,CAACE,GAAJ,CAAQ,CAAC,CAAC,CAACD,GAAD,EAAO,CAACE,WAAW,CAAG,EAAf,EAAqB,EAA7B,CAAD,GAAsCA,WAA9C,EAA2DC,IAA3D,CAAgE,IAAhE,CADJ,CAGO,KAAMC,CAAAA,gBAAgB,CAAGC,MAAM,EAAK;MACrCP,gBAAgB,CAACO,MAAD,CAAS,OAAT,CAAkB;;;UAG9BP,gBAAgB,CAACO,MAAD,CAAS,SAAT,CAAoB;;;;UAIpCP,gBAAgB,CAACO,MAAD,CAAS,WAAT,CAAsB;;;;UAItCP,gBAAgB,CAACO,MAAD,CAAS,eAAT,CAA0B;;CAZ7C,C,0CAgBA,KAAMC,CAAAA,iBAAiB,CAAGD,MAAM,EAAI,CACvC,GAAIE,CAAAA,SAAS,CAAG,CACZC,KAAK,CAAE,EADK,CAEZC,QAAQ,CAAE,EAFE,CAGZC,YAAY,CAAE,EAHF,CAAhB,CAMAL,MAAM,CAACM,OAAP,CACI,CAAC,CAACC,KAAK,CAAG,EAAT,CAAaC,OAAO,CAAG,EAAvB,CAA2BC,SAAS,CAAG,EAAvC,CAA2CC,aAAa,CAAG,EAA3D,CAAD,GAAoE,CAChE,GAAIH,KAAK,CAACL,SAAV,CAAqB,CACjBA,SAAS,kBACFA,SADE,IAEFK,KAAK,CAACL,SAFJ,CAAT,CAIH,CACD,GAAIM,OAAO,CAACN,SAAZ,CAAuB,CACnBA,SAAS,CAACC,KAAV,kBACOD,SAAS,CAACC,KADjB,IAEOK,OAAO,CAACN,SAFf,EAIH,CACD,GAAIO,SAAS,CAACP,SAAd,CAAyB,CACrBA,SAAS,CAACE,QAAV,kBACOF,SAAS,CAACE,QADjB,IAEOK,SAAS,CAACP,SAFjB,EAIH,CACD,GAAIQ,aAAa,CAACR,SAAlB,CAA6B,CACzBA,SAAS,CAACG,YAAV,kBACOH,SAAS,CAACG,YADjB,IAEOK,aAAa,CAACR,SAFrB,EAIH,CACJ,CA1BL,EA6BA,MAAOA,CAAAA,SAAP,CACH,CArCM,C,4CAuCA,KAAMS,CAAAA,qBAAqB,CAAG,CACjCC,EAAE,CAAC,CAACC,IAAD,CAAD,CAAS,CACP,MAAOA,CAAAA,IAAP,CACH,CAHgC,CAA9B,C","sourcesContent":["const parseDefinitions = (arr, key) =>\n    arr.map(({[key]: {definitions = \"\"} = {}}) => definitions).join(\"\\n\");\n\nexport const generateTypeDefs = models => `\n    ${parseDefinitions(models, \"types\")}\n\n    type Query {\n        ${parseDefinitions(models, \"queries\")}\n    }\n\n    type Mutation {\n        ${parseDefinitions(models, \"mutations\")}\n    }\n\n    type Subscription {\n        ${parseDefinitions(models, \"subscriptions\")}\n    }\n`;\n\nexport const generateResolvers = models => {\n    let resolvers = {\n        Query: {},\n        Mutation: {},\n        Subscription: {},\n    };\n\n    models.forEach(\n        ({types = {}, queries = {}, mutations = {}, subscriptions = {}}) => {\n            if (types.resolvers) {\n                resolvers = {\n                    ...resolvers,\n                    ...types.resolvers,\n                };\n            }\n            if (queries.resolvers) {\n                resolvers.Query = {\n                    ...resolvers.Query,\n                    ...queries.resolvers,\n                };\n            }\n            if (mutations.resolvers) {\n                resolvers.Mutation = {\n                    ...resolvers.Mutation,\n                    ...mutations.resolvers,\n                };\n            }\n            if (subscriptions.resolvers) {\n                resolvers.Subscription = {\n                    ...resolvers.Subscription,\n                    ...subscriptions.resolvers,\n                };\n            }\n        },\n    );\n\n    return resolvers;\n};\n\nexport const arangoElementResolver = {\n    id({_key}) {\n        return _key;\n    },\n};\n"],"file":"utils.js"}