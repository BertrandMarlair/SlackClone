{"version":3,"sources":["../../src/schema/index.js"],"names":["sleep","ms","Promise","resolve","setTimeout","maxReconnect","connected","sequelize","Sequelize","dialect","operatorsAliases","Op","host","process","env","DB_HOST","define","underscored","authenticate","err","log","error","models","User","import","Channel","Message","Team","Member","DirectMessage","Object","keys","forEach","modelName","associate","structures","channel","message","user","team","directMessage","commons","typeDefs","resolvers"],"mappings":"gIAAA,4DACA,+DAEA,8BAEA,uEACA,uEACA,iEACA,iEACA,mFACA,gE,gfAEA,KAAMA,CAAAA,KAAK,CAAGC,EAAE,EAAI,GAAIC,CAAAA,OAAJ,CAAYC,OAAO,EAAIC,UAAU,CAACD,OAAD,CAAUF,EAAV,CAAjC,CAApB,C,aAEe,SAAY,CACvB,GAAII,CAAAA,YAAY,CAAG,EAAnB,CACIC,SAAS,CAAG,KADhB,CAEA,KAAMC,CAAAA,SAAS,CAAG,GAAIC,mBAAJ,CAAc,OAAd,CAAuB,UAAvB,CAAmC,UAAnC,CAA+C,CAC7DC,OAAO,CAAE,UADoD,CAE7DC,gBAAgB,CAAEF,mBAAUG,EAFiC,CAG7DC,IAAI,CAAEC,OAAO,CAACC,GAAR,CAAYC,OAAZ,EAAuB,WAHgC,CAI7DC,MAAM,CAAE,CACJC,WAAW,CAAE,IADT,CAJqD,CAA/C,CAAlB,CASA,MAAO,CAACX,SAAD,EAAcD,YAArB,CAAmC,CAC/B,GAAI,CACA,KAAME,CAAAA,SAAS,CAACW,YAAV,EAAN,CACAZ,SAAS,CAAG,IAAZ,CACH,CAAC,MAAOa,GAAP,CAAY,CACVC,gBAAIC,KAAJ,CAAU,2BAAV,EACAhB,YAAY,GACZ,KAAML,CAAAA,KAAK,CAAC,IAAD,CAAX,CACH,CACJ,CAED,GAAI,CAACM,SAAL,CAAgB,CACZ,MAAO,KAAP,CACH,CAED,KAAMgB,CAAAA,MAAM,CAAG,CACXC,IAAI,CAAEhB,SAAS,CAACiB,MAAV,CAAiB,+BAAjB,CADK,CAEXC,OAAO,CAAElB,SAAS,CAACiB,MAAV,CAAiB,kCAAjB,CAFE,CAGXE,OAAO,CAAEnB,SAAS,CAACiB,MAAV,CAAiB,kCAAjB,CAHE,CAIXG,IAAI,CAAEpB,SAAS,CAACiB,MAAV,CAAiB,+BAAjB,CAJK,CAKXI,MAAM,CAAErB,SAAS,CAACiB,MAAV,CAAiB,iCAAjB,CALG,CAMXK,aAAa,CAAEtB,SAAS,CAACiB,MAAV,CACX,wCADW,CANJ,CAAf,CAWAM,MAAM,CAACC,IAAP,CAAYT,MAAZ,EAAoBU,OAApB,CAA4BC,SAAS,EAAI,CACrC,GAAI,aAAeX,CAAAA,MAAM,CAACW,SAAD,CAAzB,CAAsC,CAClCX,MAAM,CAACW,SAAD,CAAN,CAAkBC,SAAlB,CAA4BZ,MAA5B,EACH,CACJ,CAJD,EAMAA,MAAM,CAACf,SAAP,CAAmBA,SAAnB,CACAe,MAAM,CAACd,SAAP,CAAmBA,kBAAnB,CAEA,MAAOc,CAAAA,MAAP,CACH,C,0BAED,KAAMa,CAAAA,UAAU,CAAG,CAACC,OAAD,CAAUC,OAAV,CAAmBC,IAAnB,CAAyBC,IAAzB,CAA+BC,aAA/B,CAA8CC,OAA9C,CAAnB,CAEO,KAAMC,CAAAA,QAAQ,CAAG,4BAAiBP,UAAjB,CAAjB,C,0BACA,KAAMQ,CAAAA,SAAS,CAAG,6BAAkBR,UAAlB,CAAlB,C","sourcesContent":["import Sequelize from \"sequelize\";\nimport log from \"../utils/logger\";\n\nimport {generateTypeDefs, generateResolvers} from \"./utils\";\n\nimport * as channel from \"./models/channel/index\";\nimport * as message from \"./models/message/index\";\nimport * as user from \"./models/user/index\";\nimport * as team from \"./models/team/index\";\nimport * as directMessage from \"./models/directMessage/index\";\nimport * as commons from \"./commons/index\";\n\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nexport default async () => {\n    let maxReconnect = 20,\n        connected = false;\n    const sequelize = new Sequelize(\"slack\", \"postgres\", \"postgres\", {\n        dialect: \"postgres\",\n        operatorsAliases: Sequelize.Op,\n        host: process.env.DB_HOST || \"localhost\",\n        define: {\n            underscored: true,\n        },\n    });\n\n    while (!connected && maxReconnect) {\n        try {\n            await sequelize.authenticate();\n            connected = true;\n        } catch (err) {\n            log.error(\"reconnecting in 5 seconds\");\n            maxReconnect--;\n            await sleep(5000);\n        }\n    }\n\n    if (!connected) {\n        return null;\n    }\n\n    const models = {\n        User: sequelize.import(\"./models/user/sequelize/index\"),\n        Channel: sequelize.import(\"./models/channel/sequelize/index\"),\n        Message: sequelize.import(\"./models/message/sequelize/index\"),\n        Team: sequelize.import(\"./models/team/sequelize/index\"),\n        Member: sequelize.import(\"./models/member/sequelize/index\"),\n        DirectMessage: sequelize.import(\n            \"./models/directMessage/sequelize/index\",\n        ),\n    };\n\n    Object.keys(models).forEach(modelName => {\n        if (\"associate\" in models[modelName]) {\n            models[modelName].associate(models);\n        }\n    });\n\n    models.sequelize = sequelize;\n    models.Sequelize = Sequelize;\n\n    return models;\n};\n\nconst structures = [channel, message, user, team, directMessage, commons];\n\nexport const typeDefs = generateTypeDefs(structures);\nexport const resolvers = generateResolvers(structures);\n"],"file":"index.js"}