{"version":3,"sources":["../../src/schema/index.js"],"names":["sleep","ms","Promise","resolve","setTimeout","Op","Sequelize","operatorsAliases","$eq","eq","$ne","ne","$gte","gte","$gt","gt","$lte","lte","$lt","lt","$not","not","$in","in","$notIn","notIn","$is","is","$like","like","$notLike","notLike","$iLike","iLike","$notILike","notILike","$regexp","regexp","$notRegexp","notRegexp","$iRegexp","iRegexp","$notIRegexp","notIRegexp","$between","between","$notBetween","notBetween","$overlap","overlap","$contains","contains","$contained","contained","$adjacent","adjacent","$strictLeft","strictLeft","$strictRight","strictRight","$noExtendRight","noExtendRight","$noExtendLeft","noExtendLeft","$and","and","$or","or","$any","any","$all","all","$values","values","$col","col","maxReconnect","connected","sequelize","dialect","host","process","env","DB_HOST","define","underscored","authenticate","err","log","error","models","User","import","Channel","Message","Team","Member","DirectMessage","Object","keys","forEach","modelName","associate","structures","channel","message","user","team","directMessage","commons","typeDefs","resolvers"],"mappings":"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","sourcesContent":["import Sequelize from \"sequelize\";\nimport log from \"../utils/logger\";\n\nimport {generateTypeDefs, generateResolvers} from \"./utils\";\n\nimport * as channel from \"./models/channel/index\";\nimport * as message from \"./models/message/index\";\nimport * as user from \"./models/user/index\";\nimport * as team from \"./models/team/index\";\nimport * as directMessage from \"./models/directMessage/index\";\nimport * as commons from \"./commons/index\";\n\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst Op = Sequelize.Op;\nconst operatorsAliases = {\n    $eq: Op.eq,\n    $ne: Op.ne,\n    $gte: Op.gte,\n    $gt: Op.gt,\n    $lte: Op.lte,\n    $lt: Op.lt,\n    $not: Op.not,\n    $in: Op.in,\n    $notIn: Op.notIn,\n    $is: Op.is,\n    $like: Op.like,\n    $notLike: Op.notLike,\n    $iLike: Op.iLike,\n    $notILike: Op.notILike,\n    $regexp: Op.regexp,\n    $notRegexp: Op.notRegexp,\n    $iRegexp: Op.iRegexp,\n    $notIRegexp: Op.notIRegexp,\n    $between: Op.between,\n    $notBetween: Op.notBetween,\n    $overlap: Op.overlap,\n    $contains: Op.contains,\n    $contained: Op.contained,\n    $adjacent: Op.adjacent,\n    $strictLeft: Op.strictLeft,\n    $strictRight: Op.strictRight,\n    $noExtendRight: Op.noExtendRight,\n    $noExtendLeft: Op.noExtendLeft,\n    $and: Op.and,\n    $or: Op.or,\n    $any: Op.any,\n    $all: Op.all,\n    $values: Op.values,\n    $col: Op.col,\n};\n\nexport default async () => {\n    let maxReconnect = 20,\n        connected = false;\n    const sequelize = new Sequelize(\"slack\", \"postgres\", \"postgres\", {\n        dialect: \"postgres\",\n        operatorsAliases,\n        host: process.env.DB_HOST || \"localhost\",\n        define: {\n            underscored: true,\n        },\n    });\n\n    while (!connected && maxReconnect) {\n        try {\n            await sequelize.authenticate();\n            connected = true;\n        } catch (err) {\n            log.error(\"reconnecting in 5 seconds\");\n            maxReconnect--;\n            await sleep(5000);\n        }\n    }\n\n    if (!connected) {\n        return null;\n    }\n\n    const models = {\n        User: sequelize.import(\"./models/user/sequelize/index\"),\n        Channel: sequelize.import(\"./models/channel/sequelize/index\"),\n        Message: sequelize.import(\"./models/message/sequelize/index\"),\n        Team: sequelize.import(\"./models/team/sequelize/index\"),\n        Member: sequelize.import(\"./models/member/sequelize/index\"),\n        DirectMessage: sequelize.import(\n            \"./models/directMessage/sequelize/index\",\n        ),\n    };\n\n    Object.keys(models).forEach(modelName => {\n        if (\"associate\" in models[modelName]) {\n            models[modelName].associate(models);\n        }\n    });\n\n    models.sequelize = sequelize;\n    models.Sequelize = Sequelize;\n\n    return models;\n};\n\nconst structures = [channel, message, user, team, directMessage, commons];\n\nexport const typeDefs = generateTypeDefs(structures);\nexport const resolvers = generateResolvers(structures);\n"],"file":"index.js"}