{"version":3,"sources":["../../../../../src/schema/models/team/resolvers/addTeamMember.js"],"names":["requireAuth","createResolver","parent","email","teamId","models","user","teamPromise","Team","findOne","where","id","raw","userToAddPromise","User","team","userToAdd","Promise","all","owner","ok","errors","path","message","console","log","Member","create","userId","err","error"],"mappings":"6FAAA,wEACA,oFACA,wD,gGAEeA,wBAAYC,cAAZ,CACX,MAAOC,MAAP,CAAe,CAAEC,KAAF,CAASC,MAAT,CAAf,CAAkC,CAAEC,MAAF,CAAUC,IAAV,CAAlC,GAAuD,CACnD,GAAI,CACA,KAAMC,CAAAA,WAAW,CAAGF,MAAM,CAACG,IAAP,CAAYC,OAAZ,CAAoB,CAAEC,KAAK,CAAE,CAAEC,EAAE,CAAEP,MAAN,CAAT,CAApB,CAA8C,CAAEQ,GAAG,CAAE,IAAP,CAA9C,CAApB,CACA,KAAMC,CAAAA,gBAAgB,CAAGR,MAAM,CAACS,IAAP,CAAYL,OAAZ,CAAoB,CAAEC,KAAK,CAAE,CAAEP,KAAF,CAAT,CAApB,CAA0C,CAAES,GAAG,CAAE,IAAP,CAA1C,CAAzB,CACA,KAAM,CAAEG,IAAF,CAAQC,SAAR,EAAsB,KAAMC,CAAAA,OAAO,CAACC,GAAR,CAAY,CAACX,WAAD,CAAcM,gBAAd,CAAZ,CAAlC,CACA,GAAGE,IAAI,CAACI,KAAL,GAAeb,IAAI,CAACK,EAAvB,CAA0B,CACtB,MAAO,CACHS,EAAE,CAAE,KADD,CAEHC,MAAM,CAAE,CAAC,CAACC,IAAI,CAAE,OAAP,CAAgBC,OAAO,CAAE,+DAAzB,CAAD,CAFL,CAAP,CAIH,CACD,GAAI,CAACP,SAAL,CAAe,CACX,MAAO,CACHI,EAAE,CAAE,KADD,CAEHC,MAAM,CAAE,CAAC,CAACC,IAAI,CAAE,OAAP,CAAgBC,OAAO,CAAE,8BAAzB,CAAD,CAFL,CAAP,CAIH,CACDC,OAAO,CAACC,GAAR,CAAYT,SAAS,CAACL,EAAtB,CAA0BP,MAA1B,EACA,KAAMC,CAAAA,MAAM,CAACqB,MAAP,CAAcC,MAAd,CAAqB,CACvBC,MAAM,CAAEZ,SAAS,CAACL,EADK,CAEvBP,MAFuB,CAArB,CAAN,CAIA,MAAO,CACHgB,EAAE,CAAE,IADD,CAAP,CAGH,CAAC,MAAOS,GAAP,CAAY,CACVJ,gBAAIK,KAAJ,CAAUD,GAAV,EACA,MAAO,CACHT,EAAE,CAAE,KADD,CAEHC,MAAM,CAAE,0BAAaQ,GAAb,CAAkBxB,MAAlB,CAFL,CAAP,CAIH,CACJ,CAjCU,C","sourcesContent":["import log from \"../../../../utils/logger\";\nimport formatErrors from '../../../../utils/formatErrors'\nimport { requireAuth } from '../../../../utils/permission'\n\nexport default requireAuth.createResolver(\n    async (parent, { email, teamId }, { models, user }) => {\n        try {\n            const teamPromise = models.Team.findOne({ where: { id: teamId }}, { raw: true })\n            const userToAddPromise = models.User.findOne({ where: { email } }, { raw: true })\n            const [ team, userToAdd ] = await Promise.all([teamPromise, userToAddPromise])\n            if(team.owner !== user.id){\n                return {\n                    ok: false,\n                    errors: [{path: 'email', message: \"You can't add member to a team because yout are not the owner\"}]\n                }\n            }\n            if (!userToAdd){\n                return {\n                    ok: false,\n                    errors: [{path: 'email', message: \"No user found for this email\"}]\n                }\n            }\n            console.log(userToAdd.id, teamId)\n            await models.Member.create({\n                userId: userToAdd.id,\n                teamId\n            })\n            return {\n                ok: true,\n            }\n        } catch (err) {\n            log.error(err)\n            return {\n                ok: false,\n                errors: formatErrors(err, models)\n            }\n        }\n    }\n)"],"file":"addTeamMember.js"}