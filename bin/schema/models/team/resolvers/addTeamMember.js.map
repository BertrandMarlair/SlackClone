{"version":3,"sources":["../../../../../src/schema/models/team/resolvers/addTeamMember.js"],"names":["requireAuth","createResolver","parent","email","teamId","models","user","memberPromise","Member","findOne","where","userId","id","raw","userToAddPromise","User","member","userToAdd","Promise","all","admin","ok","errors","path","message","create","err","log","error"],"mappings":"6FAAA,wEACA,oFACA,wD,gGAEeA,wBAAYC,cAAZ,CACX,MAAOC,MAAP,CAAe,CAACC,KAAD,CAAQC,MAAR,CAAf,CAAgC,CAACC,MAAD,CAASC,IAAT,CAAhC,GAAmD,CAC/C,GAAI,CACA,KAAMC,CAAAA,aAAa,CAAGF,MAAM,CAACG,MAAP,CAAcC,OAAd,CAClB,CAACC,KAAK,CAAE,CAACN,MAAD,CAASO,MAAM,CAAEL,IAAI,CAACM,EAAtB,CAAR,CADkB,CAElB,CAACC,GAAG,CAAE,IAAN,CAFkB,CAAtB,CAIA,KAAMC,CAAAA,gBAAgB,CAAGT,MAAM,CAACU,IAAP,CAAYN,OAAZ,CACrB,CAACC,KAAK,CAAE,CAACP,KAAD,CAAR,CADqB,CAErB,CAACU,GAAG,CAAE,IAAN,CAFqB,CAAzB,CAIA,KAAM,CAACG,MAAD,CAASC,SAAT,EAAsB,KAAMC,CAAAA,OAAO,CAACC,GAAR,CAAY,CAC1CZ,aAD0C,CAE1CO,gBAF0C,CAAZ,CAAlC,CAKA,GAAI,CAACE,MAAM,CAACI,KAAZ,CAAmB,CACf,MAAO,CACHC,EAAE,CAAE,KADD,CAEHC,MAAM,CAAE,CACJ,CACIC,IAAI,CAAE,OADV,CAEIC,OAAO,CACH,+DAHR,CADI,CAFL,CAAP,CAUH,CACD,GAAI,CAACP,SAAL,CAAgB,CACZ,MAAO,CACHI,EAAE,CAAE,KADD,CAEHC,MAAM,CAAE,CACJ,CACIC,IAAI,CAAE,OADV,CAEIC,OAAO,CAAE,8BAFb,CADI,CAFL,CAAP,CASH,CACD,KAAMnB,CAAAA,MAAM,CAACG,MAAP,CAAciB,MAAd,CAAqB,CACvBd,MAAM,CAAEM,SAAS,CAACL,EADK,CAEvBR,MAFuB,CAArB,CAAN,CAIA,MAAO,CACHiB,EAAE,CAAE,IADD,CAAP,CAGH,CAAC,MAAOK,GAAP,CAAY,CACVC,gBAAIC,KAAJ,CAAUF,GAAV,EACA,MAAO,CACHL,EAAE,CAAE,KADD,CAEHC,MAAM,CAAE,0BAAaI,GAAb,CAAkBrB,MAAlB,CAFL,CAAP,CAIH,CACJ,CArDU,C","sourcesContent":["import log from \"../../../../utils/logger\";\nimport formatErrors from \"../../../../utils/formatErrors\";\nimport {requireAuth} from \"../../../../utils/permission\";\n\nexport default requireAuth.createResolver(\n    async (parent, {email, teamId}, {models, user}) => {\n        try {\n            const memberPromise = models.Member.findOne(\n                {where: {teamId, userId: user.id}},\n                {raw: true},\n            );\n            const userToAddPromise = models.User.findOne(\n                {where: {email}},\n                {raw: true},\n            );\n            const [member, userToAdd] = await Promise.all([\n                memberPromise,\n                userToAddPromise,\n            ]);\n\n            if (!member.admin) {\n                return {\n                    ok: false,\n                    errors: [\n                        {\n                            path: \"email\",\n                            message:\n                                \"You can't add member to a team because yout are not the owner\",\n                        },\n                    ],\n                };\n            }\n            if (!userToAdd) {\n                return {\n                    ok: false,\n                    errors: [\n                        {\n                            path: \"email\",\n                            message: \"No user found for this email\",\n                        },\n                    ],\n                };\n            }\n            await models.Member.create({\n                userId: userToAdd.id,\n                teamId,\n            });\n            return {\n                ok: true,\n            };\n        } catch (err) {\n            log.error(err);\n            return {\n                ok: false,\n                errors: formatErrors(err, models),\n            };\n        }\n    },\n);\n"],"file":"addTeamMember.js"}