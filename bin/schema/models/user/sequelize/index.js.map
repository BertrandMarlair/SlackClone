{"version":3,"sources":["../../../../../src/schema/models/user/sequelize/index.js"],"names":["sequelize","DataTypes","User","define","username","type","STRING","unique","validate","isAlphanumeric","args","msg","len","email","isEmail","password","hooks","afterValidate","user","hashedPassword","bcrypt","hash","associate","models","belongsToMany","Team","through","foreignKey","name","field","Channel"],"mappings":"6FAAA,sD,gGAEe,CAACA,SAAD,CAAYC,SAAZ,GAA0B,CACrC,KAAMC,CAAAA,IAAI,CAAGF,SAAS,CAACG,MAAV,CAAiB,MAAjB,CAAyB,CAClCC,QAAQ,CAAE,CACNC,IAAI,CAAEJ,SAAS,CAACK,MADV,CAENC,MAAM,CAAE,IAFF,CAGNC,QAAQ,CAAE,CACNC,cAAc,CAAE,CACZC,IAAI,CAAE,IADM,CAEZC,GAAG,CAAE,mDAFO,CADV,CAKNC,GAAG,CAAE,CACDF,IAAI,CAAE,CAAC,CAAD,CAAI,EAAJ,CADL,CAEDC,GAAG,CAAE,2DAFJ,CALC,CAHJ,CADwB,CAelCE,KAAK,CAAE,CACHR,IAAI,CAAEJ,SAAS,CAACK,MADb,CAEHC,MAAM,CAAE,IAFL,CAGHC,QAAQ,CAAE,CACNM,OAAO,CAAE,CACLJ,IAAI,CAAE,IADD,CAELC,GAAG,CAAE,eAFA,CADH,CAHP,CAf2B,CAyBlCI,QAAQ,CAAE,CACNV,IAAI,CAAEJ,SAAS,CAACK,MADV,CAENE,QAAQ,CAAE,CACNI,GAAG,CAAE,CACDF,IAAI,CAAE,CAAC,CAAD,CAAI,GAAJ,CADL,CAEDC,GAAG,CAAE,4DAFJ,CADC,CAFJ,CAzBwB,CAAzB,CAkCX,CACEK,KAAK,CAAE,CACHC,aAAa,CAAE,KAAOC,CAAAA,IAAP,EAAgB,CAC3B,KAAMC,CAAAA,cAAc,CAAG,KAAMC,iBAAOC,IAAP,CAAYH,IAAI,CAACH,QAAjB,CAA2B,EAA3B,CAA7B,CAEAG,IAAI,CAACH,QAAL,CAAgBI,cAAhB,CACH,CALE,CADT,CAlCW,CAAb,CA4CAjB,IAAI,CAACoB,SAAL,CAAkBC,MAAD,EAAY,CACzBrB,IAAI,CAACsB,aAAL,CAAmBD,MAAM,CAACE,IAA1B,CAAgC,CAC5BC,OAAO,CAAE,QADmB,CAE5BC,UAAU,CAAE,CACRC,IAAI,CAAE,QADE,CAERC,KAAK,CAAE,SAFC,CAFgB,CAAhC,EAQA3B,IAAI,CAACsB,aAAL,CAAmBD,MAAM,CAACO,OAA1B,CAAmC,CAC/BJ,OAAO,CAAE,gBADsB,CAE/BC,UAAU,CAAE,CACRC,IAAI,CAAE,QADE,CAERC,KAAK,CAAE,SAFC,CAFmB,CAAnC,EAOH,CAhBD,CAkBA,MAAO3B,CAAAA,IAAP,CACH,C","sourcesContent":["import bcrypt from 'bcrypt'\n\nexport default (sequelize, DataTypes) => {\n    const User = sequelize.define('user', {\n        username: {\n            type: DataTypes.STRING,\n            unique: true,\n            validate: {\n                isAlphanumeric: {\n                    args: true,\n                    msg: 'The username can only contain lettres ans numbers'\n                },\n                len: {\n                    args: [3, 25],\n                    msg: 'The username needs to be between 3 and 25 characters long'\n                },\n            }\n        },\n        email: {\n            type: DataTypes.STRING,\n            unique: true,\n            validate: {\n                isEmail: {\n                    args: true,\n                    msg: 'Invalid email'\n                },\n            }\n        },\n        password: {\n            type: DataTypes.STRING,\n            validate: {\n                len: {\n                    args: [3, 100],\n                    msg: 'The password needs to be between 3 and 100 characters long'\n                },\n            }\n        }\n    },{\n        hooks: {\n            afterValidate: async (user) => {\n                const hashedPassword = await bcrypt.hash(user.password, 12)\n                // eslint-disable-next-line require-atomic-updates\n                user.password = hashedPassword\n            }  \n        }\n    });\n\n    User.associate = (models) => {\n        User.belongsToMany(models.Team, {\n            through: 'member',\n            foreignKey: {\n                name: 'userId',\n                field: 'user_id',\n            },\n        });\n        // N:M\n        User.belongsToMany(models.Channel, {\n            through: 'channel_member',\n            foreignKey: {\n                name: 'userId',\n                field: 'user_id',\n            },\n        });\n    };\n\n    return User;\n};\n"],"file":"index.js"}