{"version":3,"sources":["../../../../../src/schema/models/user/sequelize/index.js"],"names":["sequelize","DataTypes","User","define","username","type","STRING","unique","validate","isAlphanumeric","args","msg","len","email","isEmail","password","hooks","afterValidate","user","hashedPassword","bcrypt","hash","associate","models","belongsToMany","Team","through","foreignKey","name","field","Channel"],"mappings":"6FAAA,sD,gGAEe,CAACA,SAAD,CAAYC,SAAZ,GAA0B,CACrC,KAAMC,CAAAA,IAAI,CAAGF,SAAS,CAACG,MAAV,CACT,MADS,CAET,CACIC,QAAQ,CAAE,CACNC,IAAI,CAAEJ,SAAS,CAACK,MADV,CAENC,MAAM,CAAE,IAFF,CAGNC,QAAQ,CAAE,CACNC,cAAc,CAAE,CACZC,IAAI,CAAE,IADM,CAEZC,GAAG,CACC,mDAHQ,CADV,CAMNC,GAAG,CAAE,CACDF,IAAI,CAAE,CAAC,CAAD,CAAI,EAAJ,CADL,CAEDC,GAAG,CACC,2DAHH,CANC,CAHJ,CADd,CAiBIE,KAAK,CAAE,CACHR,IAAI,CAAEJ,SAAS,CAACK,MADb,CAEHC,MAAM,CAAE,IAFL,CAGHC,QAAQ,CAAE,CACNM,OAAO,CAAE,CACLJ,IAAI,CAAE,IADD,CAELC,GAAG,CAAE,eAFA,CADH,CAHP,CAjBX,CA2BII,QAAQ,CAAE,CACNV,IAAI,CAAEJ,SAAS,CAACK,MADV,CAENE,QAAQ,CAAE,CACNI,GAAG,CAAE,CACDF,IAAI,CAAE,CAAC,CAAD,CAAI,GAAJ,CADL,CAEDC,GAAG,CACC,4DAHH,CADC,CAFJ,CA3Bd,CAFS,CAwCT,CACIK,KAAK,CAAE,CACHC,aAAa,CAAE,KAAMC,CAAAA,IAAN,EAAc,CACzB,KAAMC,CAAAA,cAAc,CAAG,KAAMC,iBAAOC,IAAP,CAAYH,IAAI,CAACH,QAAjB,CAA2B,EAA3B,CAA7B,CAEAG,IAAI,CAACH,QAAL,CAAgBI,cAAhB,CACH,CALE,CADX,CAxCS,CAAb,CAmDAjB,IAAI,CAACoB,SAAL,CAAiBC,MAAM,EAAI,CACvBrB,IAAI,CAACsB,aAAL,CAAmBD,MAAM,CAACE,IAA1B,CAAgC,CAC5BC,OAAO,CAAE,QADmB,CAE5BC,UAAU,CAAE,CACRC,IAAI,CAAE,QADE,CAERC,KAAK,CAAE,SAFC,CAFgB,CAAhC,EAQA3B,IAAI,CAACsB,aAAL,CAAmBD,MAAM,CAACO,OAA1B,CAAmC,CAC/BJ,OAAO,CAAE,gBADsB,CAE/BC,UAAU,CAAE,CACRC,IAAI,CAAE,QADE,CAERC,KAAK,CAAE,SAFC,CAFmB,CAAnC,EAOH,CAhBD,CAkBA,MAAO3B,CAAAA,IAAP,CACH,C","sourcesContent":["import bcrypt from \"bcrypt\";\n\nexport default (sequelize, DataTypes) => {\n    const User = sequelize.define(\n        \"user\",\n        {\n            username: {\n                type: DataTypes.STRING,\n                unique: true,\n                validate: {\n                    isAlphanumeric: {\n                        args: true,\n                        msg:\n                            \"The username can only contain lettres ans numbers\",\n                    },\n                    len: {\n                        args: [3, 25],\n                        msg:\n                            \"The username needs to be between 3 and 25 characters long\",\n                    },\n                },\n            },\n            email: {\n                type: DataTypes.STRING,\n                unique: true,\n                validate: {\n                    isEmail: {\n                        args: true,\n                        msg: \"Invalid email\",\n                    },\n                },\n            },\n            password: {\n                type: DataTypes.STRING,\n                validate: {\n                    len: {\n                        args: [3, 100],\n                        msg:\n                            \"The password needs to be between 3 and 100 characters long\",\n                    },\n                },\n            },\n        },\n        {\n            hooks: {\n                afterValidate: async user => {\n                    const hashedPassword = await bcrypt.hash(user.password, 12);\n\n                    user.password = hashedPassword;\n                },\n            },\n        },\n    );\n\n    User.associate = models => {\n        User.belongsToMany(models.Team, {\n            through: \"member\",\n            foreignKey: {\n                name: \"userId\",\n                field: \"user_id\",\n            },\n        });\n        // n:M\n        User.belongsToMany(models.Channel, {\n            through: \"channel_member\",\n            foreignKey: {\n                name: \"userId\",\n                field: \"user_id\",\n            },\n        });\n    };\n\n    return User;\n};\n"],"file":"index.js"}