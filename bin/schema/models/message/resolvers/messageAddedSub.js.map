{"version":3,"sources":["../../../../../src/schema/models/message/resolvers/messageAddedSub.js"],"names":["subscribe","pubsub","asyncIterator","MESSAGE_ADDED","payload","args","channelId"],"mappings":"6FAAA,2DACA,oBACA,wE,gGAGe,CACXA,SAAS,CAAE,qCACP,IAAMC,gBAAOC,aAAP,CAAqBC,eAArB,CADC,CAEP,CAACC,OAAD,CAAUC,IAAV,GAAmBD,OAAO,CAACE,SAAR,GAAsBD,IAAI,CAACC,SAFvC,CADA,C","sourcesContent":["import {withFilter} from \"graphql-subscriptions\";\nimport {MESSAGE_ADDED} from \"..\";\nimport pubsub from \"../../../../utils/pubsub\";\n// import {requireAuth} from \"../../../../utils/permission\";\n\nexport default {\n    subscribe: withFilter(\n        () => pubsub.asyncIterator(MESSAGE_ADDED),\n        (payload, args) => payload.channelId === args.channelId,\n    ),\n};\n// export default {\n//     subscribe: withFilter(\n//         requireAuth.createResolver(\n//             async (parents, {channelId}, {models, user}) => {\n//                 // check if part of the team\n//                 const channel = await models.Channel.findOne({\n//                     where: {id: channelId},\n//                 });\n//                 const member = await models.Member.findOne({\n//                     where: {teamId: channel.teamId, userId: user.id},\n//                 });\n\n//                 if (!member) {\n//                     throw new Error(\n//                         \"You have to be a memeber to the team for get the messages\",\n//                     );\n//                 }\n//                 return pubsub.asyncIterator(MESSAGE_ADDED);\n//             },\n//         ),\n//         (payload, args) => payload.channelId === args.channelId,\n//     ),\n// };\n"],"file":"messageAddedSub.js"}