{"version":3,"sources":["../../src/utils/permission.js"],"names":["createResolver","resolver","baseResolver","childResolver","newResolver","parent","args","context","info","requireAuth","user","id","Error","requireTeamAccess","channelId","models","channel","Channel","findOne","where","member","Member","teamId","userId","requireAdmin","isAdmin"],"mappings":"gJAAA,KAAMA,CAAAA,cAAc,CAAGC,QAAQ,EAAI,CAC/B,KAAMC,CAAAA,YAAY,CAAGD,QAArB,CAEAC,YAAY,CAACF,cAAb,CAA8BG,aAAa,EAAI,CAC3C,KAAMC,CAAAA,WAAW,CAAG,MAAOC,MAAP,CAAeC,IAAf,CAAqBC,OAArB,CAA8BC,IAA9B,GAAuC,CACvD,KAAMP,CAAAA,QAAQ,CAACI,MAAD,CAASC,IAAT,CAAeC,OAAf,CAAwBC,IAAxB,CAAd,CACA,MAAOL,CAAAA,aAAa,CAACE,MAAD,CAASC,IAAT,CAAeC,OAAf,CAAwBC,IAAxB,CAApB,CACH,CAHD,CAKA,MAAOR,CAAAA,cAAc,CAACI,WAAD,CAArB,CACH,CAPD,CAQA,MAAOF,CAAAA,YAAP,CACH,CAZD,CAcO,KAAMO,CAAAA,WAAW,CAAGT,cAAc,CAAC,CAACK,MAAD,CAASC,IAAT,CAAe,CAACI,IAAD,CAAf,GAA0B,CAChE,GAAI,CAACA,IAAD,EAAS,CAACA,IAAI,CAACC,EAAnB,CAAuB,CACnB,KAAM,IAAIC,CAAAA,KAAJ,CAAU,mBAAV,CAAN,CACH,CACJ,CAJwC,CAAlC,C,gCAMA,KAAMC,CAAAA,iBAAiB,CAAGb,cAAc,CAC3C,MAAOK,MAAP,CAAe,CAACS,SAAD,CAAf,CAA4B,CAACJ,IAAD,CAAOK,MAAP,CAA5B,GAA+C,CAC3C,GAAI,CAACL,IAAD,EAAS,CAACA,IAAI,CAACC,EAAnB,CAAuB,CACnB,KAAM,IAAIC,CAAAA,KAAJ,CAAU,mBAAV,CAAN,CACH,CACD,KAAMI,CAAAA,OAAO,CAAG,KAAMD,CAAAA,MAAM,CAACE,OAAP,CAAeC,OAAf,CAAuB,CACzCC,KAAK,CAAE,CAACR,EAAE,CAAEG,SAAL,CADkC,CAAvB,CAAtB,CAGA,KAAMM,CAAAA,MAAM,CAAG,KAAML,CAAAA,MAAM,CAACM,MAAP,CAAcH,OAAd,CAAsB,CACvCC,KAAK,CAAE,CAACG,MAAM,CAAEN,OAAO,CAACM,MAAjB,CAAyBC,MAAM,CAAEb,IAAI,CAACC,EAAtC,CADgC,CAAtB,CAArB,CAIA,GAAI,CAACS,MAAL,CAAa,CACT,KAAM,IAAIR,CAAAA,KAAJ,CACF,2DADE,CAAN,CAGH,CACJ,CAjB0C,CAAxC,C,4CAoBA,KAAMY,CAAAA,YAAY,CAAGf,WAAW,CAACT,cAAZ,CACxB,CAACK,MAAD,CAASC,IAAT,CAAe,CAACI,IAAD,CAAf,GAA0B,CACtB,GAAI,CAACA,IAAI,CAACe,OAAV,CAAmB,CACf,KAAM,IAAIb,CAAAA,KAAJ,CAAU,uBAAV,CAAN,CACH,CACJ,CALuB,CAArB,C","sourcesContent":["const createResolver = resolver => {\n    const baseResolver = resolver;\n\n    baseResolver.createResolver = childResolver => {\n        const newResolver = async (parent, args, context, info) => {\n            await resolver(parent, args, context, info);\n            return childResolver(parent, args, context, info);\n        };\n\n        return createResolver(newResolver);\n    };\n    return baseResolver;\n};\n\nexport const requireAuth = createResolver((parent, args, {user}) => {\n    if (!user || !user.id) {\n        throw new Error(\"Not authenticated\");\n    }\n});\n\nexport const requireTeamAccess = createResolver(\n    async (parent, {channelId}, {user, models}) => {\n        if (!user || !user.id) {\n            throw new Error(\"Not authenticated\");\n        }\n        const channel = await models.Channel.findOne({\n            where: {id: channelId},\n        });\n        const member = await models.Member.findOne({\n            where: {teamId: channel.teamId, userId: user.id},\n        });\n\n        if (!member) {\n            throw new Error(\n                \"You have to be a memeber to the team for get the messages\",\n            );\n        }\n    },\n);\n\nexport const requireAdmin = requireAuth.createResolver(\n    (parent, args, {user}) => {\n        if (!user.isAdmin) {\n            throw new Error(\"Requires admin access\");\n        }\n    },\n);\n"],"file":"permission.js"}