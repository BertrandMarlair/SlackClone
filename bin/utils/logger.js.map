{"version":3,"sources":["../../src/utils/logger.js"],"names":["DATE_FORMAT","logger","level","format","json","defaultMeta","service","transports","File","filename","Console","printf","message","DateTime","local","toFormat","error","bind","warn","info","verbose","debug","silly","log"],"mappings":"6LAAA,gCACA,4BAEA,KAAMA,CAAAA,WAAW,CAAG,mBAApB,CAEA,KAAMC,CAAAA,MAAM,CAAG,0BAAa,CACxBC,KAAK,CAAE,MADiB,CAExBC,MAAM,CAAEA,gBAAOC,IAAP,EAFgB,CAGxBC,WAAW,CAAE,CACTC,OAAO,CAAE,cADA,CAHW,CAMxBC,UAAU,CAAE,CAKR,GAAIA,qBAAWC,IAAf,CAAoB,CAChBC,QAAQ,CAAE,gBADM,CAEhBP,KAAK,CAAE,OAFS,CAApB,CALQ,CASR,GAAIK,qBAAWC,IAAf,CAAoB,CAChBC,QAAQ,CAAE,mBADM,CAApB,CATQ,CAYR,GAAIF,qBAAWG,OAAf,CAAuB,CACnBR,KAAK,CAAE,OADY,CAEnBC,MAAM,CAAEA,gBAAOQ,MAAP,CACJ,CAAC,CAACT,KAAD,CAAQU,OAAR,CAAD,GACK,GAAEC,gBAASC,KAAT,GAAiBC,QAAjB,CACCf,WADD,CAED,KAAIE,KAAM,KAAIU,OAAQ,EAJxB,CAFW,CAAvB,CAZQ,CANY,CAAb,CAAf,CA8BO,KAAMI,CAAAA,KAAK,CAAGf,MAAM,CAACe,KAAP,CAAef,MAAM,CAACe,KAAP,CAAaC,IAAb,CAAkBhB,MAAlB,CAAf,CAA2CA,MAAM,CAACe,KAAhE,C,oBACA,KAAME,CAAAA,IAAI,CAAGjB,MAAM,CAACiB,IAAP,CAAcjB,MAAM,CAACiB,IAAP,CAAYD,IAAZ,CAAiBhB,MAAjB,CAAd,CAAyCA,MAAM,CAACiB,IAA7D,C,kBACA,KAAMC,CAAAA,IAAI,CAAGlB,MAAM,CAACkB,IAAP,CAAclB,MAAM,CAACkB,IAAP,CAAYF,IAAZ,CAAiBhB,MAAjB,CAAd,CAAyCA,MAAM,CAACkB,IAA7D,C,kBACA,KAAMC,CAAAA,OAAO,CAAGnB,MAAM,CAACmB,OAAP,CAAiBnB,MAAM,CAACmB,OAAP,CAAeH,IAAf,CAAoBhB,MAApB,CAAjB,CAA+CA,MAAM,CAACmB,OAAtE,C,wBACA,KAAMC,CAAAA,KAAK,CAAGpB,MAAM,CAACoB,KAAP,CAAepB,MAAM,CAACoB,KAAP,CAAaJ,IAAb,CAAkBhB,MAAlB,CAAf,CAA2CA,MAAM,CAACoB,KAAhE,C,oBACA,KAAMC,CAAAA,KAAK,CAAGrB,MAAM,CAACqB,KAAP,CAAerB,MAAM,CAACqB,KAAP,CAAaL,IAAb,CAAkBhB,MAAlB,CAAf,CAA2CA,MAAM,CAACqB,KAAhE,C,oBACA,KAAMC,CAAAA,GAAG,CAAGtB,MAAM,CAACoB,KAAP,CAAepB,MAAM,CAACoB,KAAP,CAAaJ,IAAb,CAAkBhB,MAAlB,CAAf,CAA2CA,MAAM,CAACoB,KAA9D,C,6BAEQ,CACXL,KADW,CAEXE,IAFW,CAGXC,IAHW,CAIXC,OAJW,CAKXC,KALW,CAMXC,KANW,CAOXC,GAPW,C","sourcesContent":["import {createLogger, transports, format} from \"winston\";\nimport {DateTime} from \"luxon\";\n\nconst DATE_FORMAT = \"yyyy/LL/dd TT.SSS\";\n\nconst logger = createLogger({\n    level: 'info',\n    format: format.json(),\n    defaultMeta: {\n        service: 'user-service'\n    },\n    transports: [\n        //\n        // - Write to all logs with level `info` and below to `combined.log` \n        // - Write all logs error (and below) to `error.log`.\n        //\n        new transports.File({\n            filename: 'logs/error.log',\n            level: 'error'\n        }),\n        new transports.File({\n            filename: 'logs/combined.log'\n        }),\n        new transports.Console({\n            level: \"debug\",\n            format: format.printf(\n                ({level, message}) =>\n                    `${DateTime.local().toFormat(\n                        DATE_FORMAT,\n                    )} |${level}| ${message}`,\n            ),\n        }),\n    ]\n});\n\nexport const error = logger.error ? logger.error.bind(logger) : logger.error;\nexport const warn = logger.warn ? logger.warn.bind(logger) : logger.warn;\nexport const info = logger.info ? logger.info.bind(logger) : logger.info;\nexport const verbose = logger.verbose ? logger.verbose.bind(logger) : logger.verbose;\nexport const debug = logger.debug ? logger.debug.bind(logger) : logger.debug;\nexport const silly = logger.silly ? logger.silly.bind(logger) : logger.silly;\nexport const log = logger.debug ? logger.debug.bind(logger) : logger.debug;\n\nexport default {\n    error,\n    warn,\n    info,\n    verbose,\n    debug,\n    silly,\n    log,\n};\n"],"file":"logger.js"}