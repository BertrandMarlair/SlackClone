{"version":3,"sources":["../src/index.js"],"names":["app","httpServer","http","createServer","corsOptions","origin","credentials","use","endpointUrl","process","env","PORT","bodyParser","text","type","then","models","log","error","req","res","next","ApolloServer","schema","typeDefs","resolvers","context","user","SECRET","SECRET2","applyMiddleware","path","sequelize","sync","force","endpoint","installSubscriptionHandlers","listen","info"],"mappings":"aAAA,wDACA,kDACA,kDACA,+DACA,sDACA,8DACA,8DACA,0DACA,2CAEA,gEACA,yB,gfAEA,KAAMA,CAAAA,GAAG,CAAG,sBAAZ,CACA,KAAMC,CAAAA,UAAU,CAAGC,cAAKC,YAAL,CAAkBH,GAAlB,CAAnB,CAEA,GAAII,CAAAA,WAAW,CAAG,CACdC,MAAM,CAAE,GADM,CAEdC,WAAW,CAAE,IAFC,CAAlB,CAIAN,GAAG,CAACO,GAAJ,CAAQ,kBAAKH,WAAL,CAAR,EAEAJ,GAAG,CAACO,GAAJ,CAAQ,MAAR,CAAgB,wBAAkB,CAACC,WAAW,CAAG,oBAAmBC,OAAO,CAACC,GAAR,CAAYC,IAAK,GAAnD,CAAlB,CAAhB,EACAX,GAAG,CAACO,GAAJ,CAAQK,oBAAWC,IAAX,CAAgB,CAACC,IAAI,CAAE,qBAAP,CAAhB,CAAR,EAEA,qBAAYC,IAAZ,CAAkBC,MAAD,EAAW,CACxB,GAAI,CAACA,MAAL,CAAY,CACRC,gBAAIC,KAAJ,CAAU,6BAAV,EACA,MAAO,KAAP,CACH,CAEDlB,GAAG,CAACO,GAAJ,CAAQ,CAACY,GAAD,CAAMC,GAAN,CAAWC,IAAX,GAAoB,qBAAQF,GAAR,CAAaC,GAAb,CAAkBC,IAAlB,CAAwBL,MAAxB,CAA5B,EAEA,KAAMb,CAAAA,YAAY,CAAG,IACjB,GAAImB,kCAAJ,CAAiB,CACbC,MAAM,CAAE,uCAAqB,CACzBC,QAAQ,CAARA,eADyB,CAEzBC,SAAS,CAATA,gBAFyB,CAArB,CADK,CAMbC,OAAO,CAAE,CAAC,CAACP,GAAD,CAAD,IAAY,CACjBH,MADiB,CAEjBW,IAAI,CAAER,GAAG,EAAIA,GAAG,CAACQ,IAFA,CAGjBC,MAAM,CAAEnB,OAAO,CAACC,GAAR,CAAYkB,MAHH,CAIjBC,OAAO,CAAEpB,OAAO,CAACC,GAAR,CAAYmB,OAJJ,CAAZ,CANI,CAAjB,CADJ,CAeA1B,YAAY,CAAC,IAAD,CAAO,IAAP,CAAZ,CAAyB2B,eAAzB,CAAyC,CAAC9B,GAAD,CAAM+B,IAAI,CAAE,UAAZ,CAAzC,EAEAf,MAAM,CAACgB,SAAP,CAAiBC,IAAjB,CAAsB,CAACC,KAAK,CAAE,KAAR,CAAtB,EAAsCnB,IAAtC,CAA2C,IAAM,CAC7C,KAAMoB,CAAAA,QAAQ,CAAGhC,YAAY,EAA7B,CAEAgC,QAAQ,CAACC,2BAAT,CAAqCnC,UAArC,EACAkC,QAAQ,CAACL,eAAT,CAAyB,CAAC9B,GAAD,CAAM+B,IAAI,CAAE,GAAZ,CAAzB,EAEA9B,UAAU,CAACoC,MAAX,CAAkB5B,OAAO,CAACC,GAAR,CAAYC,IAA9B,CAAoC,IAAMM,gBAAIqB,IAAJ,CAAU,8CAA6C7B,OAAO,CAACC,GAAR,CAAYC,IAAK,GAAxE,CAA1C,EACH,CAPD,EAQH,CAjCD","sourcesContent":["import express from 'express';\nimport http from \"http\";\nimport cors from \"cors\";\nimport bodyParser from \"body-parser\";\nimport {express as voyagerMiddleware} from \"graphql-voyager/middleware\";\nimport getModels from './schema/index';\nimport log from \"./utils/logger\";\nimport {ApolloServer} from 'apollo-server-express';\nimport {makeExecutableSchema} from \"graphql-tools\";\nimport { typeDefs, resolvers } from './schema/index';\nimport getUser from './utils/getUser';\nimport 'dotenv/config';\n\nconst app = express();\nconst httpServer = http.createServer(app);\n\nvar corsOptions = {\n    origin: '*',\n    credentials: true\n};\napp.use(cors(corsOptions));\n\napp.use(\"/map\", voyagerMiddleware({endpointUrl: `http://localhost:${process.env.PORT}/`}));\napp.use(bodyParser.text({type: \"application/graphql\"}));\n\ngetModels().then((models)=> {\n    if (!models){\n        log.error('Could not connect to server')\n        return null\n    }\n\n    app.use((req, res, next) => getUser(req, res, next, models))\n    \n    const createServer = () =>\n        new ApolloServer({\n            schema: makeExecutableSchema({\n                typeDefs,\n                resolvers,\n                // schemaDirectives,\n            }),\n            context: ({req}) => ({\n                models,\n                user: req && req.user,\n                SECRET: process.env.SECRET,\n                SECRET2: process.env.SECRET2\n            }),\n        });\n    \n    createServer(true, true).applyMiddleware({app, path: \"/explore\"});\n    \n    models.sequelize.sync({force: false}).then(() => {\n        const endpoint = createServer();\n    \n        endpoint.installSubscriptionHandlers(httpServer);\n        endpoint.applyMiddleware({app, path: \"/\"});\n    \n        httpServer.listen(process.env.PORT, () => log.info(`Server ready. -> start on http://localhost:${process.env.PORT}/`));\n    })\n})\n"],"file":"index.js"}