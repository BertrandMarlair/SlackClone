{"version":3,"sources":["../src/index.js"],"names":["app","httpServer","http","createServer","corsOptions","origin","credentials","use","endpointUrl","process","env","URL","PORT","bodyParser","text","type","then","models","log","error","req","res","next","ApolloServer","schema","typeDefs","resolvers","context","connection","SECRET","SECRET2","user","subscriptions","onConnect","connectionParams","token","refreshToken","applyMiddleware","path","sequelize","sync","force","endpoint","installSubscriptionHandlers","listen","info"],"mappings":"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","sourcesContent":["import express from \"express\";\nimport http from \"http\";\nimport cors from \"cors\";\nimport bodyParser from \"body-parser\";\nimport {express as voyagerMiddleware} from \"graphql-voyager/middleware\";\nimport getModels from \"./schema/index\";\nimport log from \"./utils/logger\";\nimport {ApolloServer} from \"apollo-server-express\";\nimport {makeExecutableSchema} from \"graphql-tools\";\nimport {typeDefs, resolvers} from \"./schema/index\";\nimport getUser from \"./utils/getUser\";\nimport getUserSubscription from \"./utils/getUserSubscription\";\nimport \"dotenv/config\";\n\nconst app = express();\nconst httpServer = http.createServer(app);\n\nlet corsOptions = {\n    origin: \"*\",\n    credentials: true,\n};\n\napp.use(cors(corsOptions));\n\napp.use(\n    \"/map\",\n    voyagerMiddleware({endpointUrl: `${process.env.URL}:${process.env.PORT}/`}),\n);\napp.use(bodyParser.text({type: \"application/graphql\"}));\n\ngetModels().then(models => {\n    if (!models) {\n        log.error(\"Could not connect to server\");\n        return null;\n    }\n\n    app.use((req, res, next) => getUser(req, res, next, models));\n\n    const createServer = () =>\n        new ApolloServer({\n            schema: makeExecutableSchema({\n                typeDefs,\n                resolvers,\n                // schemaDirectives,\n            }),\n            context: async ({req, connection}) => {\n                if (connection) {\n                    // check connection for metadata\n                    return {\n                        models: connection.context.models,\n                        SECRET: process.env.SECRET,\n                        SECRET2: process.env.SECRET2,\n                        user: req ? req.user : connection.context.user,\n                    };\n                }\n\n                return {\n                    models,\n                    SECRET: process.env.SECRET,\n                    SECRET2: process.env.SECRET2,\n                    user: req && req.user,\n                };\n            },\n            subscriptions: {\n                onConnect: connectionParams => {\n                    const {token, refreshToken} = connectionParams;\n\n                    if (token && refreshToken) {\n                        return getUserSubscription(token, refreshToken, models);\n                    }\n\n                    return {models};\n                },\n                // onDisconnect: webSocket => {\n\n                // },\n            },\n        });\n\n    createServer(true, true).applyMiddleware({app, path: \"/explore\"});\n    models.sequelize.sync({force: false}).then(() => {\n        const endpoint = createServer();\n\n        endpoint.installSubscriptionHandlers(httpServer);\n        endpoint.applyMiddleware({app, path: \"/\"});\n\n        httpServer.listen(process.env.PORT, () =>\n            log.info(\n                `Server ready. -> start on ${process.env.URL}:${process.env.PORT}/`,\n            ),\n        );\n    });\n});\n"],"file":"index.js"}